'use client';

import { useCallback, useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { useQueryClient } from '@tanstack/react-query';
import { toast } from 'sonner';
import { PageForm } from './page-form';
import { api } from '@/lib/api';

export default function PageViewPage({ pageId }: { pageId: string }) {
  const isNew = pageId === 'new';
  const [editingPage, setEditingPage] = useState<any>(isNew ? null : undefined);
  const [loading, setLoading] = useState(!isNew);
  const router = useRouter();
  const qc = useQueryClient();

  useEffect(() => {
    let cancelled = false;
    if (!isNew) {
      setLoading(true);
      const requestSlug = String(pageId);
      const url = `/pages/${encodeURIComponent(requestSlug)}`;
      // eslint-disable-next-line no-console
      console.log('[PageView] GET', `${api.defaults.baseURL ?? ''}${url}`);
      api
        .get(url)
        .then((res) => {
          if (cancelled) return;
          const data = res.data?.data ?? res.data;
          // eslint-disable-next-line no-console
          console.log('[PageView] GET success', { status: res.status, data });
          if (!data) {
            toast.error('Page not found');
            router.replace('/admin/page');
            return;
          }
          setEditingPage(data);
        })
        .catch((e: any) => {
          if (cancelled) return;
          const status = e?.response?.status;
          const err = e?.response?.data || e?.message;
          // eslint-disable-next-line no-console
          console.error('[PageView] GET error', { status, url, err });
          toast.error('Failed to load page');
          router.replace('/admin/page');
        })
        .finally(() => {
          if (!cancelled) setLoading(false);
        });
    }
    return () => {
      cancelled = true;
    };
  }, [isNew, pageId, router]);

  const handleSave = useCallback(
    async (formData: any) => {
      try {
        const payload = {
          title: formData.title,
          // slug is optional and generated by backend from title; we omit it
          content: formData.content,
          status: formData.status === 'published' ? 'published' : 'draft',
          metaTitle: formData.seo?.metaTitle,
          metaDescription: formData.seo?.metaDescription
        };
        if (isNew) {
          // eslint-disable-next-line no-console
          console.log(
            '[PageView] POST',
            `${api.defaults.baseURL ?? ''}/pages`,
            payload
          );
          await api.post('/pages', payload);
          toast.success('Page created');
        } else {
          const url = `/pages/${encodeURIComponent(String(pageId))}`;
          // eslint-disable-next-line no-console
          console.log(
            '[PageView] PUT',
            `${api.defaults.baseURL ?? ''}${url}`,
            payload
          );
          await api.put(url, payload);
          toast.success('Page updated');
        }
        qc.invalidateQueries({ queryKey: ['pages'] });
        router.replace('/admin/page');
      } catch (e: any) {
        const resp = e?.response?.data;
        const message =
          resp?.message || resp?.error || e?.message || 'Save failed';
        // eslint-disable-next-line no-console
        console.error('[PageView] SAVE error', {
          status: e?.response?.status,
          data: resp,
          message
        });
        toast.error(message);
      }
    },
    [isNew, pageId, qc, router]
  );

  const handleCancel = useCallback(() => {
    router.push('/admin/page');
  }, [router]);

  if (loading) return null;

  return (
    <PageForm
      editingPage={editingPage}
      onSave={handleSave}
      onCancel={handleCancel}
    />
  );
}
